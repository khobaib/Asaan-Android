package asaan.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import asaan.dao.AddItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ADD_ITEM.
*/
public class AddItemDao extends AbstractDao<AddItem, Long> {

    public static final String TABLENAME = "ADD_ITEM";

    /**
     * Properties of entity AddItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Store_id = new Property(1, int.class, "store_id", false, "STORE_ID");
        public final static Property Store_name = new Property(2, String.class, "store_name", false, "STORE_NAME");
        public final static Property Price = new Property(3, int.class, "price", false, "PRICE");
        public final static Property Item_name = new Property(4, String.class, "item_name", false, "ITEM_NAME");
        public final static Property Quantity = new Property(5, int.class, "quantity", false, "QUANTITY");
        public final static Property Item_id = new Property(6, int.class, "item_id", false, "ITEM_ID");
        public final static Property Notes = new Property(7, String.class, "notes", false, "NOTES");
        public final static Property Order_type = new Property(8, int.class, "order_type", false, "ORDER_TYPE");
        public final static Property Estimated_time = new Property(9, long.class, "estimated_time", false, "ESTIMATED_TIME");
    };

    private DaoSession daoSession;


    public AddItemDao(DaoConfig config) {
        super(config);
    }
    
    public AddItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ADD_ITEM' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'STORE_ID' INTEGER NOT NULL ," + // 1: store_id
                "'STORE_NAME' TEXT NOT NULL ," + // 2: store_name
                "'PRICE' INTEGER NOT NULL ," + // 3: price
                "'ITEM_NAME' TEXT NOT NULL ," + // 4: item_name
                "'QUANTITY' INTEGER NOT NULL ," + // 5: quantity
                "'ITEM_ID' INTEGER NOT NULL ," + // 6: item_id
                "'NOTES' TEXT NOT NULL ," + // 7: notes
                "'ORDER_TYPE' INTEGER NOT NULL ," + // 8: order_type
                "'ESTIMATED_TIME' INTEGER NOT NULL );"); // 9: estimated_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ADD_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AddItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStore_id());
        stmt.bindString(3, entity.getStore_name());
        stmt.bindLong(4, entity.getPrice());
        stmt.bindString(5, entity.getItem_name());
        stmt.bindLong(6, entity.getQuantity());
        stmt.bindLong(7, entity.getItem_id());
        stmt.bindString(8, entity.getNotes());
        stmt.bindLong(9, entity.getOrder_type());
        stmt.bindLong(10, entity.getEstimated_time());
    }

    @Override
    protected void attachEntity(AddItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AddItem readEntity(Cursor cursor, int offset) {
        AddItem entity = new AddItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // store_id
            cursor.getString(offset + 2), // store_name
            cursor.getInt(offset + 3), // price
            cursor.getString(offset + 4), // item_name
            cursor.getInt(offset + 5), // quantity
            cursor.getInt(offset + 6), // item_id
            cursor.getString(offset + 7), // notes
            cursor.getInt(offset + 8), // order_type
            cursor.getLong(offset + 9) // estimated_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AddItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStore_id(cursor.getInt(offset + 1));
        entity.setStore_name(cursor.getString(offset + 2));
        entity.setPrice(cursor.getInt(offset + 3));
        entity.setItem_name(cursor.getString(offset + 4));
        entity.setQuantity(cursor.getInt(offset + 5));
        entity.setItem_id(cursor.getInt(offset + 6));
        entity.setNotes(cursor.getString(offset + 7));
        entity.setOrder_type(cursor.getInt(offset + 8));
        entity.setEstimated_time(cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AddItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AddItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

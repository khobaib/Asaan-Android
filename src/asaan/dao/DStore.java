package asaan.dao;

import java.util.List;
import asaan.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table Stores.
 */
public class DStore {

	private String address;
	private String backgroundImageUrl;
	private String backgroundThumbnailUrl;
	private Long beaconId;
	private String bssid;
	private String city;
	private Long createdDate;
	private Integer deliveryDistance;
	private String description;
	private String fbUrl;
	private String gplusUrl;
	private String hours;
	private long id;
	private Boolean isActive;
	private Double lat;
	private Double lng;
	private Long modifiedDate;
	private String name;
	private String phone;
	private Integer priceRange;
	private Boolean providesCarryout;
	private Boolean providesDelivery;
	private String rewardsDescription;
	private Integer rewardsRate;
	private String ssid;
	private String state;
	private String subType;
	private String twitterUrl;
	private String type;
	private String webSiteUrl;
	private String zip;

	/** Used to resolve relations */
	private transient DaoSession daoSession;

	/** Used for active entity operations. */
	private transient DStoreDao myDao;

	private List<Trophies> trophiesList;

	public DStore() {
	}

	public DStore(long id) {
		this.id = id;
	}

	public DStore(String address, String backgroundImageUrl, String backgroundThumbnailUrl, Long beaconId,
			String bssid, String city, Long createdDate, Integer deliveryDistance, String description, String fbUrl,
			String gplusUrl, String hours, long id, Boolean isActive, Double lat, Double lng, Long modifiedDate,
			String name, String phone, Integer priceRange, Boolean providesCarryout, Boolean providesDelivery,
			String rewardsDescription, Integer rewardsRate, String ssid, String state, String subType,
			String twitterUrl, String type, String webSiteUrl, String zip) {
		this.address = address;
		this.backgroundImageUrl = backgroundImageUrl;
		this.backgroundThumbnailUrl = backgroundThumbnailUrl;
		this.beaconId = beaconId;
		this.bssid = bssid;
		this.city = city;
		this.createdDate = createdDate;
		this.deliveryDistance = deliveryDistance;
		this.description = description;
		this.fbUrl = fbUrl;
		this.gplusUrl = gplusUrl;
		this.hours = hours;
		this.id = id;
		this.isActive = isActive;
		this.lat = lat;
		this.lng = lng;
		this.modifiedDate = modifiedDate;
		this.name = name;
		this.phone = phone;
		this.priceRange = priceRange;
		this.providesCarryout = providesCarryout;
		this.providesDelivery = providesDelivery;
		this.rewardsDescription = rewardsDescription;
		this.rewardsRate = rewardsRate;
		this.ssid = ssid;
		this.state = state;
		this.subType = subType;
		this.twitterUrl = twitterUrl;
		this.type = type;
		this.webSiteUrl = webSiteUrl;
		this.zip = zip;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getDStoreDao() : null;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getBackgroundImageUrl() {
		return backgroundImageUrl;
	}

	public void setBackgroundImageUrl(String backgroundImageUrl) {
		this.backgroundImageUrl = backgroundImageUrl;
	}

	public String getBackgroundThumbnailUrl() {
		return backgroundThumbnailUrl;
	}

	public void setBackgroundThumbnailUrl(String backgroundThumbnailUrl) {
		this.backgroundThumbnailUrl = backgroundThumbnailUrl;
	}

	public Long getBeaconId() {
		return beaconId;
	}

	public void setBeaconId(Long beaconId) {
		this.beaconId = beaconId;
	}

	public String getBssid() {
		return bssid;
	}

	public void setBssid(String bssid) {
		this.bssid = bssid;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public Long getCreatedDate() {
		return createdDate;
	}

	public void setCreatedDate(Long createdDate) {
		this.createdDate = createdDate;
	}

	public Integer getDeliveryDistance() {
		return deliveryDistance;
	}

	public void setDeliveryDistance(Integer deliveryDistance) {
		this.deliveryDistance = deliveryDistance;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getFbUrl() {
		return fbUrl;
	}

	public void setFbUrl(String fbUrl) {
		this.fbUrl = fbUrl;
	}

	public String getGplusUrl() {
		return gplusUrl;
	}

	public void setGplusUrl(String gplusUrl) {
		this.gplusUrl = gplusUrl;
	}

	public String getHours() {
		return hours;
	}

	public void setHours(String hours) {
		this.hours = hours;
	}

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public Boolean getIsActive() {
		return isActive;
	}

	public void setIsActive(Boolean isActive) {
		this.isActive = isActive;
	}

	public Double getLat() {
		return lat;
	}

	public void setLat(Double lat) {
		this.lat = lat;
	}

	public Double getLng() {
		return lng;
	}

	public void setLng(Double lng) {
		this.lng = lng;
	}

	public Long getModifiedDate() {
		return modifiedDate;
	}

	public void setModifiedDate(Long modifiedDate) {
		this.modifiedDate = modifiedDate;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public Integer getPriceRange() {
		return priceRange;
	}

	public void setPriceRange(Integer priceRange) {
		this.priceRange = priceRange;
	}

	public Boolean getProvidesCarryout() {
		return providesCarryout;
	}

	public void setProvidesCarryout(Boolean providesCarryout) {
		this.providesCarryout = providesCarryout;
	}

	public Boolean getProvidesDelivery() {
		return providesDelivery;
	}

	public void setProvidesDelivery(Boolean providesDelivery) {
		this.providesDelivery = providesDelivery;
	}

	public String getRewardsDescription() {
		return rewardsDescription;
	}

	public void setRewardsDescription(String rewardsDescription) {
		this.rewardsDescription = rewardsDescription;
	}

	public Integer getRewardsRate() {
		return rewardsRate;
	}

	public void setRewardsRate(Integer rewardsRate) {
		this.rewardsRate = rewardsRate;
	}

	public String getSsid() {
		return ssid;
	}

	public void setSsid(String ssid) {
		this.ssid = ssid;
	}

	public String getState() {
		return state;
	}

	public void setState(String state) {
		this.state = state;
	}

	public String getSubType() {
		return subType;
	}

	public void setSubType(String subType) {
		this.subType = subType;
	}

	public String getTwitterUrl() {
		return twitterUrl;
	}

	public void setTwitterUrl(String twitterUrl) {
		this.twitterUrl = twitterUrl;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public String getWebSiteUrl() {
		return webSiteUrl;
	}

	public void setWebSiteUrl(String webSiteUrl) {
		this.webSiteUrl = webSiteUrl;
	}

	public String getZip() {
		return zip;
	}

	public void setZip(String zip) {
		this.zip = zip;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public List<Trophies> getTrophiesList() {
		if (trophiesList == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			TrophiesDao targetDao = daoSession.getTrophiesDao();
			List<Trophies> trophiesListNew = targetDao._queryDStore_TrophiesList(id);
			synchronized (this) {
				if (trophiesList == null) {
					trophiesList = trophiesListNew;
				}
			}
		}
		return trophiesList;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetTrophiesList() {
		trophiesList = null;
	}

	/**
	 * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#update(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

}

package asaan.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import asaan.dao.MenuAndSubmenu;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MENU_AND_SUBMENU.
*/
public class MenuAndSubmenuDao extends AbstractDao<MenuAndSubmenu, Void> {

    public static final String TABLENAME = "MENU_AND_SUBMENU";

    /**
     * Properties of entity MenuAndSubmenu.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Active = new Property(0, Boolean.class, "active", false, "ACTIVE");
        public final static Property CreatedDate = new Property(1, Long.class, "createdDate", false, "CREATED_DATE");
        public final static Property Hours = new Property(2, String.class, "hours", false, "HOURS");
        public final static Property Id = new Property(3, Long.class, "id", false, "ID");
        public final static Property Level = new Property(4, Integer.class, "level", false, "LEVEL");
        public final static Property MenuItemCount = new Property(5, Integer.class, "menuItemCount", false, "MENU_ITEM_COUNT");
        public final static Property MenuItemPosition = new Property(6, Integer.class, "menuItemPosition", false, "MENU_ITEM_POSITION");
        public final static Property MenuType = new Property(7, Integer.class, "menuType", false, "MENU_TYPE");
        public final static Property ModifiedDate = new Property(8, Long.class, "modifiedDate", false, "MODIFIED_DATE");
        public final static Property Name = new Property(9, String.class, "name", false, "NAME");
    };


    public MenuAndSubmenuDao(DaoConfig config) {
        super(config);
    }
    
    public MenuAndSubmenuDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MENU_AND_SUBMENU' (" + //
                "'ACTIVE' INTEGER," + // 0: active
                "'CREATED_DATE' INTEGER," + // 1: createdDate
                "'HOURS' TEXT," + // 2: hours
                "'ID' INTEGER," + // 3: id
                "'LEVEL' INTEGER," + // 4: level
                "'MENU_ITEM_COUNT' INTEGER," + // 5: menuItemCount
                "'MENU_ITEM_POSITION' INTEGER," + // 6: menuItemPosition
                "'MENU_TYPE' INTEGER," + // 7: menuType
                "'MODIFIED_DATE' INTEGER," + // 8: modifiedDate
                "'NAME' TEXT);"); // 9: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MENU_AND_SUBMENU'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MenuAndSubmenu entity) {
        stmt.clearBindings();
 
        Boolean active = entity.getActive();
        if (active != null) {
            stmt.bindLong(1, active ? 1l: 0l);
        }
 
        Long createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindLong(2, createdDate);
        }
 
        String hours = entity.getHours();
        if (hours != null) {
            stmt.bindString(3, hours);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(5, level);
        }
 
        Integer menuItemCount = entity.getMenuItemCount();
        if (menuItemCount != null) {
            stmt.bindLong(6, menuItemCount);
        }
 
        Integer menuItemPosition = entity.getMenuItemPosition();
        if (menuItemPosition != null) {
            stmt.bindLong(7, menuItemPosition);
        }
 
        Integer menuType = entity.getMenuType();
        if (menuType != null) {
            stmt.bindLong(8, menuType);
        }
 
        Long modifiedDate = entity.getModifiedDate();
        if (modifiedDate != null) {
            stmt.bindLong(9, modifiedDate);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public MenuAndSubmenu readEntity(Cursor cursor, int offset) {
        MenuAndSubmenu entity = new MenuAndSubmenu( //
            cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0) != 0, // active
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // createdDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hours
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // level
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // menuItemCount
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // menuItemPosition
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // menuType
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // modifiedDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MenuAndSubmenu entity, int offset) {
        entity.setActive(cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0) != 0);
        entity.setCreatedDate(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setHours(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setLevel(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMenuItemCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMenuItemPosition(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMenuType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setModifiedDate(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(MenuAndSubmenu entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(MenuAndSubmenu entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

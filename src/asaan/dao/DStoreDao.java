package asaan.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import asaan.dao.DStore;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Stores.
*/
public class DStoreDao extends AbstractDao<DStore, Long> {

    public static final String TABLENAME = "Stores";

    /**
     * Properties of entity DStore.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Address = new Property(0, String.class, "address", false, "ADDRESS");
        public final static Property BackgroundImageUrl = new Property(1, String.class, "backgroundImageUrl", false, "BACKGROUND_IMAGE_URL");
        public final static Property BackgroundThumbnailUrl = new Property(2, String.class, "backgroundThumbnailUrl", false, "BACKGROUND_THUMBNAIL_URL");
        public final static Property BeaconId = new Property(3, Long.class, "beaconId", false, "BEACON_ID");
        public final static Property Bssid = new Property(4, String.class, "bssid", false, "BSSID");
        public final static Property City = new Property(5, String.class, "city", false, "CITY");
        public final static Property Claimed = new Property(6, Boolean.class, "claimed", false, "CLAIMED");
        public final static Property CosineLat = new Property(7, Double.class, "cosineLat", false, "COSINE_LAT");
        public final static Property CosineLng = new Property(8, Double.class, "cosineLng", false, "COSINE_LNG");
        public final static Property CreatedDate = new Property(9, Long.class, "createdDate", false, "CREATED_DATE");
        public final static Property DeliveryDistance = new Property(10, Integer.class, "deliveryDistance", false, "DELIVERY_DISTANCE");
        public final static Property DeliveryFee = new Property(11, Integer.class, "deliveryFee", false, "DELIVERY_FEE");
        public final static Property ExecutiveChef = new Property(12, String.class, "executiveChef", false, "EXECUTIVE_CHEF");
        public final static Property Description = new Property(13, String.class, "description", false, "DESCRIPTION");
        public final static Property FbUrl = new Property(14, String.class, "fbUrl", false, "FB_URL");
        public final static Property GplusUrl = new Property(15, String.class, "gplusUrl", false, "GPLUS_URL");
        public final static Property Hours = new Property(16, String.class, "hours", false, "HOURS");
        public final static Property Id = new Property(17, long.class, "id", true, "_id");
        public final static Property IsActive = new Property(18, Boolean.class, "isActive", false, "IS_ACTIVE");
        public final static Property Lat = new Property(19, Double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(20, Double.class, "lng", false, "LNG");
        public final static Property MinOrderAmtForDelivery = new Property(21, Integer.class, "minOrderAmtForDelivery", false, "MIN_ORDER_AMT_FOR_DELIVERY");
        public final static Property ModifiedDate = new Property(22, Long.class, "modifiedDate", false, "MODIFIED_DATE");
        public final static Property Name = new Property(23, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(24, String.class, "phone", false, "PHONE");
        public final static Property PriceRange = new Property(25, Integer.class, "priceRange", false, "PRICE_RANGE");
        public final static Property ProvidesCarryout = new Property(26, Boolean.class, "providesCarryout", false, "PROVIDES_CARRYOUT");
        public final static Property ProvidesDelivery = new Property(27, Boolean.class, "providesDelivery", false, "PROVIDES_DELIVERY");
        public final static Property ProvidesPreOrder = new Property(28, Boolean.class, "providesPreOrder", false, "PROVIDES_PRE_ORDER");
        public final static Property ProvidesReservation = new Property(29, Boolean.class, "providesReservation", false, "PROVIDES_RESERVATION");
        public final static Property ProvidesWaitlist = new Property(30, Boolean.class, "providesWaitlist", false, "PROVIDES_WAITLIST");
        public final static Property RewardsDescription = new Property(31, String.class, "rewardsDescription", false, "REWARDS_DESCRIPTION");
        public final static Property RewardsRate = new Property(32, Integer.class, "rewardsRate", false, "REWARDS_RATE");
        public final static Property SinLat = new Property(33, Double.class, "sinLat", false, "SIN_LAT");
        public final static Property SinLng = new Property(34, Double.class, "sinLng", false, "SIN_LNG");
        public final static Property Ssid = new Property(35, String.class, "ssid", false, "SSID");
        public final static Property State = new Property(36, String.class, "state", false, "STATE");
        public final static Property SubType = new Property(37, String.class, "subType", false, "SUB_TYPE");
        public final static Property TwitterUrl = new Property(38, String.class, "twitterUrl", false, "TWITTER_URL");
        public final static Property Type = new Property(39, String.class, "type", false, "TYPE");
        public final static Property WebSiteUrl = new Property(40, String.class, "webSiteUrl", false, "WEB_SITE_URL");
        public final static Property Zip = new Property(41, String.class, "zip", false, "ZIP");
    };

    private DaoSession daoSession;


    public DStoreDao(DaoConfig config) {
        super(config);
    }
    
    public DStoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Stores' (" + //
                "'ADDRESS' TEXT," + // 0: address
                "'BACKGROUND_IMAGE_URL' TEXT," + // 1: backgroundImageUrl
                "'BACKGROUND_THUMBNAIL_URL' TEXT," + // 2: backgroundThumbnailUrl
                "'BEACON_ID' INTEGER," + // 3: beaconId
                "'BSSID' TEXT," + // 4: bssid
                "'CITY' TEXT," + // 5: city
                "'CLAIMED' INTEGER," + // 6: claimed
                "'COSINE_LAT' REAL," + // 7: cosineLat
                "'COSINE_LNG' REAL," + // 8: cosineLng
                "'CREATED_DATE' INTEGER," + // 9: createdDate
                "'DELIVERY_DISTANCE' INTEGER," + // 10: deliveryDistance
                "'DELIVERY_FEE' INTEGER," + // 11: deliveryFee
                "'EXECUTIVE_CHEF' TEXT," + // 12: executiveChef
                "'DESCRIPTION' TEXT," + // 13: description
                "'FB_URL' TEXT," + // 14: fbUrl
                "'GPLUS_URL' TEXT," + // 15: gplusUrl
                "'HOURS' TEXT," + // 16: hours
                "'_id' INTEGER PRIMARY KEY NOT NULL ," + // 17: id
                "'IS_ACTIVE' INTEGER," + // 18: isActive
                "'LAT' REAL," + // 19: lat
                "'LNG' REAL," + // 20: lng
                "'MIN_ORDER_AMT_FOR_DELIVERY' INTEGER," + // 21: minOrderAmtForDelivery
                "'MODIFIED_DATE' INTEGER," + // 22: modifiedDate
                "'NAME' TEXT," + // 23: name
                "'PHONE' TEXT," + // 24: phone
                "'PRICE_RANGE' INTEGER," + // 25: priceRange
                "'PROVIDES_CARRYOUT' INTEGER," + // 26: providesCarryout
                "'PROVIDES_DELIVERY' INTEGER," + // 27: providesDelivery
                "'PROVIDES_PRE_ORDER' INTEGER," + // 28: providesPreOrder
                "'PROVIDES_RESERVATION' INTEGER," + // 29: providesReservation
                "'PROVIDES_WAITLIST' INTEGER," + // 30: providesWaitlist
                "'REWARDS_DESCRIPTION' TEXT," + // 31: rewardsDescription
                "'REWARDS_RATE' INTEGER," + // 32: rewardsRate
                "'SIN_LAT' REAL," + // 33: sinLat
                "'SIN_LNG' REAL," + // 34: sinLng
                "'SSID' TEXT," + // 35: ssid
                "'STATE' TEXT," + // 36: state
                "'SUB_TYPE' TEXT," + // 37: subType
                "'TWITTER_URL' TEXT," + // 38: twitterUrl
                "'TYPE' TEXT," + // 39: type
                "'WEB_SITE_URL' TEXT," + // 40: webSiteUrl
                "'ZIP' TEXT);"); // 41: zip
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Stores'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DStore entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
 
        String backgroundImageUrl = entity.getBackgroundImageUrl();
        if (backgroundImageUrl != null) {
            stmt.bindString(2, backgroundImageUrl);
        }
 
        String backgroundThumbnailUrl = entity.getBackgroundThumbnailUrl();
        if (backgroundThumbnailUrl != null) {
            stmt.bindString(3, backgroundThumbnailUrl);
        }
 
        Long beaconId = entity.getBeaconId();
        if (beaconId != null) {
            stmt.bindLong(4, beaconId);
        }
 
        String bssid = entity.getBssid();
        if (bssid != null) {
            stmt.bindString(5, bssid);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(6, city);
        }
 
        Boolean claimed = entity.getClaimed();
        if (claimed != null) {
            stmt.bindLong(7, claimed ? 1l: 0l);
        }
 
        Double cosineLat = entity.getCosineLat();
        if (cosineLat != null) {
            stmt.bindDouble(8, cosineLat);
        }
 
        Double cosineLng = entity.getCosineLng();
        if (cosineLng != null) {
            stmt.bindDouble(9, cosineLng);
        }
 
        Long createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindLong(10, createdDate);
        }
 
        Integer deliveryDistance = entity.getDeliveryDistance();
        if (deliveryDistance != null) {
            stmt.bindLong(11, deliveryDistance);
        }
 
        Integer deliveryFee = entity.getDeliveryFee();
        if (deliveryFee != null) {
            stmt.bindLong(12, deliveryFee);
        }
 
        String executiveChef = entity.getExecutiveChef();
        if (executiveChef != null) {
            stmt.bindString(13, executiveChef);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(14, description);
        }
 
        String fbUrl = entity.getFbUrl();
        if (fbUrl != null) {
            stmt.bindString(15, fbUrl);
        }
 
        String gplusUrl = entity.getGplusUrl();
        if (gplusUrl != null) {
            stmt.bindString(16, gplusUrl);
        }
 
        String hours = entity.getHours();
        if (hours != null) {
            stmt.bindString(17, hours);
        }
        stmt.bindLong(18, entity.getId());
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(19, isActive ? 1l: 0l);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(20, lat);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(21, lng);
        }
 
        Integer minOrderAmtForDelivery = entity.getMinOrderAmtForDelivery();
        if (minOrderAmtForDelivery != null) {
            stmt.bindLong(22, minOrderAmtForDelivery);
        }
 
        Long modifiedDate = entity.getModifiedDate();
        if (modifiedDate != null) {
            stmt.bindLong(23, modifiedDate);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(24, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(25, phone);
        }
 
        Integer priceRange = entity.getPriceRange();
        if (priceRange != null) {
            stmt.bindLong(26, priceRange);
        }
 
        Boolean providesCarryout = entity.getProvidesCarryout();
        if (providesCarryout != null) {
            stmt.bindLong(27, providesCarryout ? 1l: 0l);
        }
 
        Boolean providesDelivery = entity.getProvidesDelivery();
        if (providesDelivery != null) {
            stmt.bindLong(28, providesDelivery ? 1l: 0l);
        }
 
        Boolean providesPreOrder = entity.getProvidesPreOrder();
        if (providesPreOrder != null) {
            stmt.bindLong(29, providesPreOrder ? 1l: 0l);
        }
 
        Boolean providesReservation = entity.getProvidesReservation();
        if (providesReservation != null) {
            stmt.bindLong(30, providesReservation ? 1l: 0l);
        }
 
        Boolean providesWaitlist = entity.getProvidesWaitlist();
        if (providesWaitlist != null) {
            stmt.bindLong(31, providesWaitlist ? 1l: 0l);
        }
 
        String rewardsDescription = entity.getRewardsDescription();
        if (rewardsDescription != null) {
            stmt.bindString(32, rewardsDescription);
        }
 
        Integer rewardsRate = entity.getRewardsRate();
        if (rewardsRate != null) {
            stmt.bindLong(33, rewardsRate);
        }
 
        Double sinLat = entity.getSinLat();
        if (sinLat != null) {
            stmt.bindDouble(34, sinLat);
        }
 
        Double sinLng = entity.getSinLng();
        if (sinLng != null) {
            stmt.bindDouble(35, sinLng);
        }
 
        String ssid = entity.getSsid();
        if (ssid != null) {
            stmt.bindString(36, ssid);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(37, state);
        }
 
        String subType = entity.getSubType();
        if (subType != null) {
            stmt.bindString(38, subType);
        }
 
        String twitterUrl = entity.getTwitterUrl();
        if (twitterUrl != null) {
            stmt.bindString(39, twitterUrl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(40, type);
        }
 
        String webSiteUrl = entity.getWebSiteUrl();
        if (webSiteUrl != null) {
            stmt.bindString(41, webSiteUrl);
        }
 
        String zip = entity.getZip();
        if (zip != null) {
            stmt.bindString(42, zip);
        }
    }

    @Override
    protected void attachEntity(DStore entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 17);
    }    

    /** @inheritdoc */
    @Override
    public DStore readEntity(Cursor cursor, int offset) {
        DStore entity = new DStore( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // address
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // backgroundImageUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // backgroundThumbnailUrl
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // beaconId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bssid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // city
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // claimed
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // cosineLat
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // cosineLng
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // createdDate
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // deliveryDistance
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // deliveryFee
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // executiveChef
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // description
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fbUrl
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // gplusUrl
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // hours
            cursor.getLong(offset + 17), // id
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // isActive
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // lat
            cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20), // lng
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // minOrderAmtForDelivery
            cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22), // modifiedDate
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // name
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // phone
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // priceRange
            cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0, // providesCarryout
            cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0, // providesDelivery
            cursor.isNull(offset + 28) ? null : cursor.getShort(offset + 28) != 0, // providesPreOrder
            cursor.isNull(offset + 29) ? null : cursor.getShort(offset + 29) != 0, // providesReservation
            cursor.isNull(offset + 30) ? null : cursor.getShort(offset + 30) != 0, // providesWaitlist
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // rewardsDescription
            cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32), // rewardsRate
            cursor.isNull(offset + 33) ? null : cursor.getDouble(offset + 33), // sinLat
            cursor.isNull(offset + 34) ? null : cursor.getDouble(offset + 34), // sinLng
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // ssid
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // state
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // subType
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // twitterUrl
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // type
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // webSiteUrl
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41) // zip
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DStore entity, int offset) {
        entity.setAddress(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBackgroundImageUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBackgroundThumbnailUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBeaconId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setBssid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCity(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClaimed(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setCosineLat(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setCosineLng(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setCreatedDate(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setDeliveryDistance(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDeliveryFee(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setExecutiveChef(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDescription(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFbUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGplusUrl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setHours(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setId(cursor.getLong(offset + 17));
        entity.setIsActive(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setLat(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setLng(cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20));
        entity.setMinOrderAmtForDelivery(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setModifiedDate(cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22));
        entity.setName(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setPhone(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPriceRange(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setProvidesCarryout(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0);
        entity.setProvidesDelivery(cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0);
        entity.setProvidesPreOrder(cursor.isNull(offset + 28) ? null : cursor.getShort(offset + 28) != 0);
        entity.setProvidesReservation(cursor.isNull(offset + 29) ? null : cursor.getShort(offset + 29) != 0);
        entity.setProvidesWaitlist(cursor.isNull(offset + 30) ? null : cursor.getShort(offset + 30) != 0);
        entity.setRewardsDescription(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setRewardsRate(cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32));
        entity.setSinLat(cursor.isNull(offset + 33) ? null : cursor.getDouble(offset + 33));
        entity.setSinLng(cursor.isNull(offset + 34) ? null : cursor.getDouble(offset + 34));
        entity.setSsid(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setState(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setSubType(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setTwitterUrl(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setType(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setWebSiteUrl(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setZip(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DStore entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DStore entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
